    def to_dict(self, camel_case=False):
        """Returns the model properties as a dict"""
        return model_to_dict(self, serialize=camel_case)

    @classmethod
    def from_dict(cls, dictionary, camel_case=True):
        dictionary_cpy = deepcopy(dictionary)
        return validate_and_convert_types(dictionary_cpy, (cls,), ['received_data'], camel_case, True, ConversionConfiguration.get_configuration())

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, self.__class__):
            return False

        if not set(self._data_store.keys()) == set(other._data_store.keys()):
            return False
        for _var_name, this_val in self._data_store.items():
            that_val = other._data_store[_var_name]
            types = set()
            types.add(this_val.__class__)
            types.add(that_val.__class__)
            vals_equal = this_val == that_val
            if not vals_equal:
                return False
        return True
